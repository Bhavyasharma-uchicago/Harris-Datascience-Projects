summarise(
mean_state = mean(counts)
)
summarise(
mean_state = mean(counts)
)
filter(state_data, type=="State prisons", .preserve = TRUE) %>%
group_by(type == "State prison")
summarise(
mean_state = mean[state_data$counts]
)
summarise(
mean_state = mean(state_data, counts = as.numeric(counts)]
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
counts = as.numeric(counts),        # Ensure 'counts' exists and is numeric
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
#Filter data
state_data %>%
select(type, counts, decade, year)  %>%
filter(state_data, type=="State prisons", .preserve = TRUE) %>%
#Mean and Standard Deviation
state_prison_summary <- state_prison %>%
summarise(
mean_count = mean(counts, na.rm = TRUE),
sd_count = sd(counts, na.rm = TRUE)
)
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
counts = as.numeric(counts),        # Ensure 'counts' exists and is numeric
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
#Filter data
state_data %>%
select(type, counts, decade, year)  %>%
filter(type=="State prisons", .preserve = TRUE) %>%
#Mean and Standard Deviation
state_prison_summary <- state_prison %>%
summarise(
mean_count = mean(counts, na.rm = TRUE),
sd_count = sd(counts, na.rm = TRUE)
)
#TASK 2
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
counts = as.numeric(counts),        # Ensure 'counts' exists and is numeric
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
) %>%
filter(type == "State prisons") %>%
select(type, counts, decade, year)
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)
filter(type == "State prisons")
#TASK 2
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
counts = as.numeric(counts),        # Ensure 'counts' exists and is numeric
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)%>%
filter(state_data, type == "State prisons", .preserve = TRUE)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)%>%
filter(state_data, type == "State prisons", .preserve = TRUE)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)%>%
filter(state_data, type == "State prisons", .preserve = FALSE)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)%>%
filter(state_data, type=="State prisons", .preserve = FALSE)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * year %/% 10
)%>%
select(type, counts, decade, year)
#Filter data
state_data %>%
# Load and prepare State prison data
state_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
decade = 10 * year %/% 10
)
mutate(
year = as.numeric(year),
decade = 10 * year %/% 10
)
#Filter data
state_data %>%
select(type, counts, decade, year)  %>%
filter(state_data, type=="State prisons", .preserve = TRUE) %>%
#Mean and Standard Deviation
#Mead and SD calculation
# Calculate percentage growth per decade
growth_by_decade <- state_data %>%
group_by(decade) %>%
summarise(
start_count = first(state_data$counts, order_by = year),
end_count = last(state_data$counts, order_by = year),
percent_growth = (end_count - start_count) / start_count * 100
) %>%
arrange(desc(percent_growth))
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
state_data %>%
select(type, counts, decade, year)
filter(state_data, type=="State prisons", .preserve = TRUE)
(state_data)
filter(state_data, type=="State prisons", .preserve = TRUE)
#Mean and Standard Deviation
summarise(
mean_count = mean(counts, na.rm = TRUE),
sd_count = sd(counts, na.rm = TRUE)
)
summary_data <- state_data %>%
counts = as.numeric(counts)
state_data %>%
select(type, counts, decade, year) %>%
filter(type=="State prisons", .preserve = TRUE)
#TASK 2
state_data <- incarceration_data %>%
mutate(year = as.numeric(year),
counts = as.numeric(counts),
decade = 10 * as.numeric(year) %/% 10)
print(state_data)
#Filter data
state_data %>%
select(type, counts, decade, year) %>%
filter(type=="State prisons", .preserve = TRUE)%>%
#Mean and Standard Deviation
summarise(
mean_count = mean(counts, na.rm = TRUE),
sd_count = sd(counts, na.rm = TRUE)
)
growth_by_decade <- state_data %>%
group_by(decade) %>%
summarise(
start_count = first(state_data$counts, order_by = year),
end_count = last(state_data$counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count) * 100
) %>%
arrange(desc(percent_growth))
growth_by_decade <- state_data %>%
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count) * 100
) %>%
arrange(desc(percent_growth))
print(growth_by_decade)
#TASK 3
#Calculate percentage growth per decade
growth_by_decade <- state_data %>%
filter(!is.na(counts)) %>% # Remove rows where 'counts' is NA
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count) * 100
) %>%
arrange(desc(percent_growth))
print(growth_by_decade)
growth_by_decade <- state_data %>%
filter(!is.na(counts)) %>% # Remove rows where 'counts' is NA
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count) * 100
) %>%
arrange(desc(decade))
print(growth_by_decade)
#TASK 3
#Calculate percentage growth per decade
growth_by_decade <- state_data %>%
filter(!is.na(counts)) %>% # Remove rows where 'counts' is NA
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count) * 100
) %>%
arrange((decade))
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count)
) %>%
arrange(desc(decade))
growth_by_decade <- state_data %>%
filter(!is.na(counts)) %>% # Remove rows where 'counts' is NA
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count)
) %>%
arrange(desc(decade))
print(growth_by_decade)
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count)
) %>%
arrange(desc(decade))
#Filter data
state_data %>%
select(type, counts, decade, year) %>%
filter(type=="State prisons", .preserve = TRUE)%>%
#Mean and Standard Deviation
summarise(
mean_count = mean(counts, na.rm = TRUE),
sd_count = sd(counts, na.rm = TRUE)
) %>%
#TASK 4
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = ((end_count - start_count) / start_count)
) %>%
arrange(desc(decade))
growth_by_decade_state_prisons <- state_data %>%
filter(type == "State prisons") %>%
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year, na.rm = TRUE),
end_count = last(counts, order_by = year, na.rm = TRUE),
percent_growth = (end_count - start_count) / start_count * 100 # Multiply by 100 for percentage
) %>%
arrange(desc(decade))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
growth_by_decade_state_prisons <- state_data %>%
filter(type == "State prisons") %>%
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = (end_count - start_count) / start_count * 100 # Multiply by 100 for percentage
) %>%
arrange(desc(decade))
print(growth_by_decade_state_prisons)
growth_by_decade_state_prisons <- state_data %>%
filter(type == "State prisons") %>%
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = (end_count - start_count) / start_count
) %>%
arrange(desc(decade))
print(growth_by_decade_state_prisons)
growth_by_decade_state_prisons <- state_data %>%
filter(type == "State prisons") %>%
group_by(decade) %>%
summarise(
start_count = first(counts, order_by = year),
end_count = last(counts, order_by = year),
percent_growth = (end_count - start_count) / start_count
) %>%
arrange(-desc(decade))
print(growth_by_decade_state_prisons)
View(incarceration_counts_and_rates_by_type_over_time)
ggplot(incarceration_data, aes(x = year, y = counts)) +
geom_line(color = "steelblue", size = 1) +
labs(
title = "Incarceration counts (total population on a single day) over time",
x = "Year",
y = "Counts"
) +
theme_minimal()
ggplot(incarceration_data, aes(x = year, y = counts)) +
geom_line(color = "steelblue") +
labs(
title = "Incarceration counts (total population on a single day) over time",
x = "Year",
y = "Counts"
) +
theme_minimal()
#TASK 4
library(ggplot2)
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(facility_type %in% c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(facility_type, c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(type, c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
type = character(type)
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(incarceration_data, type = c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(incarceration_data, type == c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
library(ggplot2)
incarceration_subset <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
) %>%
filter(type %in% c("State prisons", "Federal prisons", "Local jails")) # Filter for your three categories
ggplot(incarceration_subset, aes(x = year, y = counts, color = type)) +
geom_line(size = 1) +
facet_wrap(~ type, scales = "free_y") +
labs(
title = "Incarceration Trends by Facility Type",
x = "Year",
y = "Number of People",
color = "Facility Type"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Assuming your data frame is named 'incarceration_data'
# and it has columns 'year', 'counts', and 'type'
incarceration_data <- incarceration_data %>%
mutate(
year = as.numeric(year),
counts = as.numeric(counts)
)
# Create the line graph
ggplot(incarceration_data, aes(x = year, y = counts, color = type)) +
geom_line(size = 1) +
scale_y_continuous(labels = scales::comma) + # Format y-axis with commas
labs(
title = "Incarceration counts (total population on a single day) over time",
x = "year",
y = "counts",
color = "type"
) +
theme_minimal()
addr <- data.frame(name = c("Alice","Bob", "Carol","Dave", "Eve"), email = c("alice@company.com", "bob@company.com", "carol@company.com", "dave@company.com", "eve@company.com"), stringsAsFactors = FALSE)
phone <- data.frame(fullname = c("Bob","Carol", "Dave","Eve", "Frank"), phone = c("919 555-1111", "919 555-2222", "919 555-3333", "310 555-4444", "919 555-5555"), stringsAsFactors = FALSE)
library(dplyr)
addr <- data.frame(
name = c("Alice","Bob", "Carol","Dave", "Eve"),
email = c("alice@company.com", "bob@company.com", "carol@company.com", "dave@company.com", "eve@company.com"),
stringsAsFactors = FALSE)
phone <- data.frame(
fullname = c("Bob","Carol", "Dave","Eve", "Frank"),
phone = c("919 555-1111", "919 555-2222", "919 555-3333", "310 555-4444", "919 555-5555"),
stringsAsFactors = FALSE)
#Left-join data set
left_joined_data <- left_join(addr, phone, by = c("name" = "full name"))
library(dplyr)
addr <- data.frame(
name = c("Alice","Bob", "Carol","Dave", "Eve"),
email = c("alice@company.com", "bob@company.com", "carol@company.com", "dave@company.com", "eve@company.com"),
stringsAsFactors = FALSE)
phone <- data.frame(
fullname = c("Bob","Carol", "Dave","Eve", "Frank"),
phone = c("919 555-1111", "919 555-2222", "919 555-3333", "310 555-4444", "919 555-5555"),
stringsAsFactors = FALSE)
#Left-join data set
left_joined_data <- left_join(addr, phone, by = c("name" = "name"))
library(dplyr)
addr <- data.frame(
name = c("Alice","Bob", "Carol","Dave", "Eve"),
email = c("alice@company.com", "bob@company.com", "carol@company.com", "dave@company.com", "eve@company.com"),
stringsAsFactors = FALSE)
phone <- data.frame(
fullname = c("Bob","Carol", "Dave","Eve", "Frank"),
phone = c("919 555-1111", "919 555-2222", "919 555-3333", "310 555-4444", "919 555-5555"),
stringsAsFactors = FALSE)
#Left-join data set
left_joined_data <- left_join(addr, phone, by = c("name" = "fullname"))
print("Result of left join:")
print(left_joined_data)
cat("\nAre there any missing values in the Left Join result?\n")
print(any(is.na(left_joined_data)))
inner_joined_data <- inner_join(addr, phone, by = c("name" = "fullname"))
print("Result of inner join:")
print(inner_joined_data)
cat("\nAre there any missing values in the Inner join result?\n")
print(any(is.na(inner_joined_data)))
#Full join
full_joined_data <- full_join(addr, phone, by = c("name" = "fullname"))
print("Result of full join:")
print(full_joined_data)
cat("\nAre there any missing values in the Full join result?\n")
print(any(is.na(full_joined_data)))
numbers <- rep(seq(-9, 10, 1), 10)
numbers <- rep(seq(-9, 10, 1), 10)
print("numbers vector:")
print(head(numbers))
print(paste("Length of numbers:", length(numbers)))
#Calculate the square of each number using a for-loop
numbers_squared <- numeric(length(numbers)) # Initialize an empty numeric vector
for (i in 1:length(numbers)) {
numbers_squared[i] <- numbers[i]^2
}
print("\nnumbers_squared vector (first few elements):")
print(head(numbers_squared))
print(paste("Length of numbers_squared:", length(numbers_squared)))
#Calculate the square with added random noise using a for-loop
noisy_numbers_squared <- numeric(length(numbers)) # Initialize an empty numeric vector
for (i in 1:length(numbers)) {
noise <- rnorm(1, sd = 5) # Generate one random number from a normal distribution with sd = 5
noisy_numbers_squared[i] <- (numbers[i]^2) + noise
}
print("\nnoisy_numbers_squared vector (first few elements):")
print(head(noisy_numbers_squared))
print(paste("Length of noisy_numbers_squared:", length(noisy_numbers_squared)))
numbers_data <- tibble(numbers = numbers,
noisy_numbers_squared = noisy_numbers_squared)
#Grapgh Plot
numbers_data %>%
ggplot(aes(x = numbers, y = noisy_numbers_squared)) +
geom_point() +
geom_smooth(color = "steelblue", size = 1.5) + # Customize the smoothed line
labs(
title = "Relationship between Numbers and Noisy Squared Values",
x = "numbers",
y = "noisy_numbers_squared"
) +
theme_bw() # Use a different theme for better contrast
notice_gpa <- function(gpa) {
if (gpa < 2) {
print(paste0("Your GPA is ", gpa, ". You are on academic probation."))
} else if (gpa >= 3.5) {
print(paste0("Your GPA is ", gpa, ". You made the Dean’s list. Congrats!"))
} else {
print(paste0("Your GPA is ", gpa))
}
}
notice_gpa(1.9)
notice_gpa(3.5)
notice_gpa(3.0)
